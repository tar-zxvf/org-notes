#+TITLE: 一些提高效率的工具
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil tasks:nil pri:nil title:t
#+AUTHOR: 子龙山人
#+EMAIL: guanghui.qu@cocos2d-x.org
#+OPTIONS: toc:3 num:nil
#+STARTUP: overview
#+LATEX_HEADER: \usepackage{xltxtra}
#+LATEX_HEADER: \setmainfont{Hiragino Sans GB}
#+LATEX_HEADER: \usepackage[paperheight=13in,paperwidth=14in]{geometry}

* Vim

** Why learn vim?
*** a very effective text editor
*** many IDE provider a vim layer
*** integrate very well with shell and is cross-platform                        :vim:hehe:
*** fast & fast & fast
*** support many kinds of text editing, extensible , configable and programable

** Prepare

*** first, you need to learn touchType

*** then go over vimtutor 3 times

*** try to use vim everyday

** How to learn vim?

*** step by step video tutorials
**** vim principle(the vim way, don't repeat yourself)
**** vim modal(insert, visual, command, normal, select, paste)
**** buffers, windows, files
**** motions & operators
**** text object
**** plugins
**** ex command
**** registers & macro
**** search & replace & global command, v command, subtitution command
**** navigation command(gg,G,H,M,L,ctrl-i,ctrl-o,ctrl-d , mark, etc)
**** cooperate with git, shell
**** github & customize vimrc
**** extend & programming your vim editor
**** tools, ctags & cscope, spell check, auto complete etc

*** key stroke optimization(make it repeatable)

*** Find the pain, solve it and finally make it a habit. ( to become a vim expert)

** What to do next?                                                             :finally:

*** where to find the master?(stackoverflow, github, goolge, vim qq group?, google+)

*** tips & wiki is our best friend, vimcasts.org, some paid video taps are also good

*** janus or something else like vim starterkit. search good vim plugins

*** conbine emacs and vim


** Vimcasts
*** Basic vim concepts
   - mode: insert mode, normal mode, visual mode, command line mode (ctrl-o: execute one command and go to insert mode)
   - windows, buffer, file
   - help system
   - open file, save file, save as file, close not save,
   - new buffer, list buffer, switch between buffer
     e, enew, bn(ext), bp(revious), blast, bfirst, bd
   - split windows, go to different windows
     only, vsp,sp,<c-w>hjkl
   - one rule, on windows
   - a buffer is the in-memory text of file, a window is a viewport of a buffer, a tab is a collection of windows

* Git
** Git 本质(5min)
Why?我们为什么要版本控制
版本管理？ 没有 Git，或者说没有版权控制工具，我们该怎么管理？ 


*** Poor man's Git (Totally wrong!)
~Git commit is a snapshot of a directory, not maintain a diff.~
git diff -u old new > diff.patch
patch filename < diff.patch

Diff 应用的顺序问题？
怎么管理这些 diff?
别人要使用这些 Diff 怎么办？
=Git 完全不是存储的 Diff=
** 理解 Working Tree,  Index Area (5min)
[[./img/git-workflow.png]]

[[./img/git-stage.png]]

Why there is a index area?
*** Index 是 git 最重要的数据结构
- index file: 
The index is a binary file (generally kept in .git/index) containing a sorted list of path names,
 each with permissions and the SHA1 of a blob object; git ls-files can show you the contents of the index:
#+begin_src sh
 git ls-files --stage
#+end_src
** 理解 Git Commit，Tag, Branch, merge, rebase, cherry-pick，submodule (10min)
*** 理解 Commit 的组成

#+BEGIN_SRC sh
  find ../.git/objects -type f
#+END_SRC

- commit is a snapshot
- SHA to a tree blob. A tree has many file/folders blob
- Use git ls-files and git ls-tree to understand snapshot
- Author
- diff(SHA)
- email


*** 理解 merge (fast forward merge 和 two-way merge, squash)
 可以使用 git merge --no-ff 来把 fast-foward 强制生成一个 merge commit
*** 理解 rebase (interactive rebase 和 none interactive rebase)
*** 理解 cherry-pick
*** 理解 Commit 的其它引用方式
  1. head: 你此时所做的修改都在 working tree 里面 
  2.  fetch head: 调用 Git fetch 命令后从远程仓库拉下来的分支的别名，
 如果没有指定 branch，则为远程仓库的默认分支的 HEAD
*** 理解 git pull = git fetch + git merge
*** 理解 git reset(soft/mixed/hard)
*** 理解 git format-patch and git apply 
git apply --stat and --check
git am --signoff <  patchname
** 推荐的 Git workflow
*** 自己的一个小任务。  短时间内能够完成的
*** 自己的一个长期任务。 有冲突和没有冲突
*** 验证开发者的 PR
*** 给别人的分支发 PR
*** 完善开发者的 PR
*** 同时进行多个任务
*** Jenkins 相关命令
*** 没有整理好历史，PR 就发出去了
*** 解决冲突： 合并 v3.7 到 v3

** 一些小技巧
*** Github Pull request 自动生成 detail 和 title
一次只提交一个 commit
*** 删除远程分支和本地分地
#+begin_src sh
git branch -d branchnae  
git branch -D branchname
#+end_src

*** 查找 bug -- git bisect
*** 巧用 git alias
在~/.gitconfig 里面添加下面的内容
#+begin_src
[alias]
	# Show the diff between the latest commit and the current state
	d	= !"git diff"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di	= !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	g	= git
	cm	= commit
	cl	= clone
	br	= branch
	st	= status
	co	= checkout
	sm	= submodule
	ci	= commit -a -v
  unst = reset HEAD
  throw	= reset --hard HEAD
	throwh	= reset --hard HEAD^
	clr	= clean -fdx -f
	last	= log -1
	glog	= log --color --graph 
--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	slog	= log --pretty=oneline	
  accept-ours = "!f() { git checkout --ours -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
  accept-theirs = "!f() { git checkout --theirs -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
  tagcommit = !sh -c 'git rev-list $0 | head -n 1'
#+end_src
*** 安装 zsh 和 git 插件

** 终极指南
Commit early, Commit often, perfect later and publish once.
** Reference:
1. http://tom.preston-werner.com/2009/05/19/the-git-parable.html
2. http://git-scm.com/book/en/v2
3. http://codetunnel.io/merge-vs-rebase-part-1-what-is-a-commit-hash/
4. https://sandofsky.com/blog/git-workflow.html
5. http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html
6. http://stackoverflow.com/questions/4084921/what-does-the-git-index-contain-exactly
7. http://gitref.org/basic/
8. http://addamhardy.com/blog/2013/06/05/good-commit-messages-and-enforcing-them-with-git-hooks/
* Zsh
* Tmux
*  Percol
* iTerm2

