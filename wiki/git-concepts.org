#+TITLE: Git及Github的使用
#+LATEX_HEADER: \usepackage{xltxtra}
#+LATEX_HEADER: \setmainfont{Hiragino Sans GB}
#+LATEX_HEADER: \usepackage[paperheight=13in,paperwidth=14in]{geometry}

* 主要内容
** Git本质(5min)
Why?我们为什么要版本控制
版本管理？ 没有Git，或者说没有版权控制工具，我们该怎么管理？ 


*** Poor man's Git (Totally wrong!)
~Git commit is a snapshot of a directory, not maintain a diff.~
git diff -u old new > diff.patch
patch filename < diff.patch

Diff应用的顺序问题？
怎么管理这些diff?
别人要使用这些Diff怎么办？
=Git完全不是存储的Diff=
** 理解Working Tree,  Index Area (5min)
[[./img/git-workflow.png]]

[[./img/git-stage.png]]

Why there is a index area?
*** Index是git最重要的数据结构
- index file: 
The index is a binary file (generally kept in .git/index) containing a sorted list of path names,
 each with permissions and the SHA1 of a blob object; git ls-files can show you the contents of the index:
#+begin_src shell-script
 git ls-files --stage
#+end_src
** 理解Git Commit，Tag, Branch, merge, rebase, cherry-pick，submodule (10min)
*** 理解Commit的组成
- commit is a snapshot
- SHA to a tree blob. A tree has many file/folders blob
- Use git ls-files and git ls-tree to understand snapshot
- Author
- diff(SHA)
- email


*** 理解merge (fast forward merge和two-way merge, squash)
 可以使用git merge --no-ff来把fast-foward强制生成一个merge commit
*** 理解rebase (interactive rebase 和 none interactive rebase)
*** 理解cherry-pick
*** 理解Commit的其它引用方式
  1. head: 你此时所做的修改都在 working tree 里面 
  2.  fetch head: 调用Git fetch命令后从远程仓库拉下来的分支的别名，
 如果没有指定branch，则为远程仓库的默认分支的HEAD
*** 理解git pull = git fetch + git merge
*** 理解git reset(soft/mixed/hard)
*** 理解git format-patch and git apply 
git apply --stat and --check
git am --signoff <  patchname
** 推荐的Git workflow
*** 自己的一个小任务。  短时间内能够完成的
*** 自己的一个长期任务。 有冲突和没有冲突
*** 验证开发者的PR
*** 给别人的分支发PR
*** 完善开发者的PR
*** 同时进行多个任务
*** Jenkins相关命令
*** 没有整理好历史，PR就发出去了
*** 解决冲突： 合并v3.7到v3

** 一些小技巧
*** Github Pull request自动生成detail和title
一次只提交一个commit
*** 删除远程分支和本地分地
#+begin_src shell
git branch -d branchnae  
git branch -D branchname
#+end_src

*** 查找bug -- git bisect
*** 巧用git alias
在~/.gitconfig里面添加下面的内容
#+begin_src config
[alias]
	# Show the diff between the latest commit and the current state
	d	= !"git diff"
	# `git di $number` shows the diff between the state `$number` revisions ago and the current state
	di	= !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	g	= git
	cm	= commit
	cl	= clone
	br	= branch
	st	= status
	co	= checkout
	sm	= submodule
	ci	= commit -a -v
  unst = reset HEAD
  throw	= reset --hard HEAD
	throwh	= reset --hard HEAD^
	clr	= clean -fdx -f
	last	= log -1
	glog	= log --color --graph 
--pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
	slog	= log --pretty=oneline	
  accept-ours = "!f() { git checkout --ours -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
  accept-theirs = "!f() { git checkout --theirs -- \"${@:-.}\"; git add -u \"${@:-.}\"; }; f"
  tagcommit = !sh -c 'git rev-list $0 | head -n 1'
#+end_src
*** 安装zsh和git插件

** 终极指南
 Commit early, commit often, perfect later and publish once.

#+begin_src cpp
  #include <iostream>
  #include <string>

  using namespace std;
  int main(char** argc, int argv)
  {
      std::cout<<"Hello World"<<std::endl;
  }
#+end_src
*** 什么是好的Commit历史
1. 必须有一个summary，而且summary不要超过50行
2. summary后必须空一行
3. 详细信息和summary必须是经过仔细思考写下的
4. 每一行不超过72个字符
*** 一些惯例
1. 是Fix bug而不是Fixed bug or fixes bug.




* Reference:

1. http://tom.preston-werner.com/2009/05/19/the-git-parable.html
2. http://git-scm.com/book/en/v2
3. http://codetunnel.io/merge-vs-rebase-part-1-what-is-a-commit-hash/
4. https://sandofsky.com/blog/git-workflow.html
5. http://gitready.com/advanced/2009/03/23/whats-inside-your-git-directory.html
6. http://stackoverflow.com/questions/4084921/what-does-the-git-index-contain-exactly
7. http://gitref.org/basic/
8. http://addamhardy.com/blog/2013/06/05/good-commit-messages-and-enforcing-them-with-git-hooks/
