** What's new in SpriteKit
*** Review
- 2D graphics framework for games, idea borrow from cocos2d-iphone
- super easy to use, easy to learn
- Apple's own optimization and better UIKit integration.
- Better tools: Xcode. Live editor.
- Support iPhone, iPad, iOS and OSX(not real cross platform: maybe cocos2d-x a try)
*** SKCameraNode - which viewport is visible, multiple cameras.
- Best feature, it's a node: actions, constrains, rotation, scale. 
*** SKAudioNode
- positional audio, environmental sound, immerse audio.
*** SKReferenceNode(reuse nodes and actions, nscopying)
- create serialized assets
- Component as assets
- editor support
- automatically cache. This file won't load more than once.
- Complex action combo or scene. You could reuse across project or games.
- Texture animation action with lighting.
*** System integration
- Metal backend. SKShader will automatically upgrade. Zero action by developers.
- If the device support metal, it will use metal, otherwise it will use OpenGL.
- Swift support.  Nullability enhancements, objective-c generics.
*** SpriteKit Tools
- games rely on tools for iteration and scalability
- game logic, animation or assets
- improve workflow and build game faster
- focus on building the gameplay
**** tools:
- Texture atlas: automatically built with xcode. TexturePacker, we use scripts.
- Asset catalog: 
  1. precise control resolution. @2x @3x 
  2.use only download the assets match with the device.
- on Demand Resources: load by tags. background streaming.（重点）
- Particle editor: SKEmitterNode. live editor. Export small files.
- XCode quick: Playground with Swift. Easy to learn and use. Even in debugger.
- 2D editor: full visual editor for 2D games, no more compile and check. node code required. visual layout. live physics simulation. live shader editing.
- 2d editor enhancement: custom classes, camera, audio node, reference node. increased collaboration and reusability.
- exciting feature: timeline action editor, realtime preview, 2d and 3d support. Cinematic and interactive animations.(重点）
- data driven, reusability, no code required.（重点）
** enhancement to SceneKit
*** intro to SceneKit
- SceneKit for 3D/ SpriteKit for 2D
- for iOS & MacOS X
- Particles/Physics/Physics fields/SpriteKit
- Metal and New scene editor
*** Scene Editor
- Can open and edit DAE, OBJ, Alembic, STL and PLY files
- New native file format(SceneKit Archive) NSKeyedArchiver
- Buld your game levels
- Shader modifiers and Ambient Occlusion
- Skybox, geometry modifiers
- collision mesh/rendered mesh
- skinning and shader modifiers
- configuring materials
- self illumination texture
- Reflective cube map
- compute shader(MTLbuffer and MTLTexture)
- Default on iOS 9
- Backward compatibility ensured(use interface builder to choose backend)
- Dealing with shaders(metal)
- shaders are not compatible
- SCNTechnique: pass description addition.
- Integration with Model I/O
- DAE format is best supported.
- Debug option
- Blend IO
- Audio nodes(AVAudioEngine)
*** Enhance
- SKTransitions
- metal support
- automatic context matching. (Metal or OpenGL)
** GamePlayKit(重点）
*** Mission
- Common design patterns and architecture
- Standard gameplay algorithm
- Applicable to many games
- Graphics and engine agnostic
- SpriteKit, SceneKit, Metal and more.
*** Pathfinding(重点）
- pathfinding operates on a navigation graph
- Graphs are collections of nodes
- Nodes are joined by connections
- Connections are directional
- Optimal path exists between any two connected nodes
**** automatic graph generation
**** GKGraph
- Abstract graph base class
- Container of graph nodes
- Dynamic add/remove nodes
- Connect new nodes
- Find paths between nodes
- Two specializations(Grid graphs, obstacle graphs)
**** GKGridGraph
- Specialized for a 2D Grid
- Creates nodes on the grid(Cardinal connections, Optional diagonal connections)
- Optional diagonal connections (Easy add/remove of grid nodes)
**** GKObstacleGraph
- Specialized for pathing around obstacles
- Obstacles are arbitrary polygons(Dynamically add/remove obstacles, Dynamically connect nodes.)
- Buffer radius ("safty zone" around obstacles, Game dependent size.)
**** GKGraphNode
- Graph node base class
- Subclass for:
  - Advanced or non-spatial costs
  - Control over pathfinding
- Create your own graphs
  - Manually manage connections
  - Good for abstract or no-spatial graphs
**** Easily generate obstacles from SKNode bounds, physics bodies or textures

*** Entity/component system
- Great way to organize game logic
- Easy to maintain
- Easy to collaborate
- Scales with complexity
- Dynamic behavior
**** GKEntity
- Collectioin of components
- Dynamically add/remove component
- Access components by class type
- Update all components
**** GKComponent
- Subclass to add functionality
- Store component data as properties
- Custom selectors extend functionality
- Updated by there entity's update
- Implement logic in [updateWithDeltaTime:]
**** GKComponentSystem
- Collectioin of components from different entities(eg.All components are of the same class)
- Use when update order is important(eg.Update all AI before movement)
- Components in a system don't update with their entity's update

*** state machines
- Backbone of many gameplay elements
- Games are a collection of state machines (eg. Animations, AI, UI, levels etc)
- Common implementation removes boilerplate
- States reused throughout your game
**** GKStateMachine
- General purpose finite state machine
  - Single current state
  - All possible state
- [enterState] cause state transition
  - Check if transition is valid
  - Calls [exit] on previous
  - [enter] on next state
- Update currentState
**** GKState
- Abstract class
- Implement logic in Enter/Exit/Update (There are called by the state machine)
- Override [isValideNextState:] to control edges
  - By default, all edges are valid
  - Can be dynamic, based on internal state

*** agents, goal and behaviors
- Agents are autonomously moving entities(Driven by behaviors and goals, realistic constrains)
- Behaviours are made of goals (goals combined via weights)
- Games need believable movements
- Organic behaviors look intelligent
- Realistic movement(Has inertia, avoid obstacles, avoid other entities, follow paths)
**** GKAgent
- Simple autonomous point-mass
- Is a GKComponent
- Update applies behaviors(Goals change acceleration, velocity, position, rotation updated)
- Units are dimensionless(game world specific)
**** GKBehavior
- Dictionary-lick container of goals
- Dynamically modify behaviors(add/remove goals, modify weights)
- Set behavior on agent to use it
**** GKAgentDelegate
- Sync graphics, animations, physics, etc
[agentWillUpdate:] called before updates
[agentDidUpdate:] called after updates

*** AI strategies(MinMax AI)
- Many games need equal AI components
  - Can play the entire game
  - Play by the same rules as human players
- Chess, Checkers, Tic-Tac-Toe, etc
**** Features
- AI-controlled opponents
- Suggest move for human players
- Best suited for turn-based games (any game with discrete moves)
- Variable difficulty(adjust look ahead, select suboptimal moves)
**** GKGameModel protocol
- Abstract of the current game state
- list of players
- currently active players
- player scores
- possible player moves
- Apply moves for players
- changes game state
*** Random sources
- game have unique random number need
- rand() gives us random numbers, but we need more.
- platform-independent determinism
- multiple sources
- number distribution
This is where random source come in.
*** Rule systems
**** A game consists of three elements
- Nouns(properties)
- Position, speed, health, equipment, etc
- Verbs(Actions)
- Run , jump, use item, acceleration, etc
- Rules
- How your nouns and verbs interact.
**** motivation
- Complex reasoning with fuzzy logic
- facts can be grades of true
- fuzzy logic deals with approximations
- separate what we should do from how we should to it
- state facts about the world
- take deferred actions based on those facts.

*** Demobots(download sample)  
- use lots of feature in SpriteKit and GameKit
- Reference node
- App slicing
** Manage 3D assets with Model I/O (重点）
*** Overview
- Framework for handling 3D assets and data.
- Import and export 3D asset files
-- Describe lighting, materials, environments
-- Process and generate asset data
-- Bake lights, subdivide and vocalize meshes.
- For physically based rendering
-- Designed for PBR tools and pipelines.
- Integrated with Xcode 7 and GameKit APIs.
- Available for iOS 9 and OS X 10.11.
Content Creation Tool -> Import -> Model I/O -> (SceneKit/Metal/OpenGL)
physic based, physics driven.
physic materials, physics light.
*** Features
- File formats( .abc, .ply, .stl, .obj)  Exports format: .stl
- Modify and Bake Assets
- Voxels
- System Integration: Playground and Swift, Finder and Quick look
- MDLAsset: Indexed container for 3D objects
- MDLObject: MDLTransformComponent -> TriggerComponent
- MDLMesh: contains one or more vertex buffers.
- MDLMeshBuffer/MDLVertexDescriptor
- Materials
**** Normal smoothing (shared vertex normals)
- Approximates curvature of more complicated geometry
- Flat vs smooth shading
**** Subdivision surfaces(Vary surface detail)
- Generate subdivided mesh from source mesh
- Increase level of detail only when and where necessary
**** Voxels(Physical realism)
- Volumetric representation consistent with the real world
- Procedural modeling/generation
- Easily explore dataset via neighborhood, child traversal
- Facilitates real-world operations like slicing and cutting
- Constructive Solid Geometry operations.

**** Advanced lighting and baking
- Global illumination
-- Global illumination looks great
-- But very expensive
-- We want to approximate GI 
-- Balance performance/quality
- Ambient occlusion 
-- Measure of geometry occlusion
-- Use offline raytracing
-- Input -- a mesh and a set of occlusion meshes
-- Output -- a set of occlusion values
- Stored in vertices or a texture
- Light map
-- Computes the effect of lights
-- Supports lots of lights
-- calculated offline
-- complex lights supported (tray trace)

** What's new in metal part1
** What's new in metal part2
** metal performance optimization
** going so social with replaykit and game center(重点）
*** Overview
*** What's new in Game center
**** What's Game Center 
- Friends 
- Leaderboards
- Real time multiplayer
- Turn based multiplayer
- Challenges
**** Guest players
- GKPlayer instance 
-- Do not require autoentication
-- First class participants in multiplayer games
- Can fill up all the slots in a game
-- Up to three for real time
-- Up to fifteen for turn based
***** Great for pass and play and handling AI players
***** You define the identifier--needs to be unique across the game
***** Cannot earn achievements or post scores
***** Sessions with guest players only compatible with other players running iOS 9
- Game still compatible with players on older systems.
**** Unified server environment
***** Sandbox(production server and sandbox are in one server)
***** Benefits
- Simplifies accounts 
- compatible with TestFlight
- Multiplayer works across versions (if enabled)
- Automatic
***** Considerations
- New games appear in friend's game list (include unreleased)
- Scores post to existing leaderboards
- iOS 8 users still need to flip the switch
*** Introducing ReplayKit
- New way to add social to your games
- Share game experiences.
- Record your running app
- Add voice commentary
- Playback, scrub and trim
- Share (Social networks, Video destination sites)
- When to Record (automatic vs user-initiated)
- only available in iOS 9.
*** Summary
- Records audio and visuals of running application
- Efficient with privacy safeguards
- Compact framework with simple adoption.

