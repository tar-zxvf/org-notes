#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil tasks:nil pri:nil title:t
#+TITLE: 编程语言学习
* Clojure
http://blog.clojure.cn/
http://ask.clojure.cn/
http://wiki.clojure.cn/index.php?title=%E9%A6%96%E9%A1%B5
http://www.flyingmachinestudios.com/programming/building-a-forum-with-clojure-datomic-angular/
[[http://martintrojer.github.io/clojure/2014/10/02/clojure-and-emacs-without-cider/][Clojure and Emacs without Cider]]
[[http://fgiasson.com/blog/index.php/2014/05/22/my-optimal-gnu-emacs-settings-for-developing-clojure-so-far/][My Optimal GNU Emacs Settings for Developing Clojure (so far) at Frederick Giasson’s Weblog]]
[[http://www.unexpected-vortices.com/clojure/brief-beginners-guide/index.html][A Brief Beginner’s Guide To Clojure]]
[[https://github.com/clojuredocs/guides][clojuredocs/guides]]
[[http://www.4clojure.com/problems][4clojure - Problem Listing]]
[[http://clojure-doc.org/][Clojure Guides | Getting Started With Clojure | Clojure Tutorials | Clojure Documentation | Clojure Docs]]
[[http://java.ociweb.com/mark/clojure/article.html][Clojure - Functional Programming for the JVM]]
[[http://stackoverflow.com/questions/12078840/recommend-web-framework-for-clojure][Recommend Web framework for Clojure - Stack Overflow]]
[[http://adambard.com/blog/clojure-in-15-minutes/][Learn Clojure in 15 minutes, perhaps - Adam Bard and his magical blog]]
[[http://sethholloway.com/thoughts-on-learning-clojure/][Thoughts on Learning Clojure - Seth Holloway]]
[[http://www.jfokus.se/jfokus11/preso/jf11_WebDevelopmentInClojure.pdf][www.jfokus.se/jfokus11/preso/jf11_WebDevelopmentInClojure.pdf]]
[[http://www.unexpected-vortices.com/clojure/brief-beginners-guide/standalone-scripts.html][Standalone Scripts]]
[[http://stackoverflow.com/questions/4260522/what-is-clojure-useful-for][What is Clojure useful for? - Stack Overflow]]
[[http://stackoverflow.com/questions/2285437/a-gentle-tutorial-to-emacs-swank-paredit-for-clojure][A gentle tutorial to Emacs/Swank/Paredit for Clojure - Stack Overflow]]

**  Clojure learning books                                         :clojure:
[[http://www.flyingmachinestudios.com/programming/to-the-printers/][Clojure for the Brave and True Is Off to the Printers!]]
  
 [2015-08-14 Fri 09:44]
* Scheme
** SCIP notes
*** Lesson one
**** Part one
- Black box abstraction.
- Write procedure which output procedure(write program which write program)
- How to control complexity.
- Conventions of interfaces.
- Design a new language to handle the complexity(highlight some details and hide some details)

**** Part two
- When someone show you a language, ask him: What's the primitives? What are the means to combination? What are the mean of abstraction?

** How to learn
*** Read books, such as "A little scheme" and "SICP
#+BEGIN_SRC emacs-lisp
  (message "hello")
#+END_SRC
"


** Rules
*** The Law of Car: The primitive *car* is defined only for non-empty lists.
*** The Law of Cdr: The primitive *cdr* is defined only for non-empty list. The *cdr* of of any non-empty list is always another list.
*** The Law of Cons: The primitive *cons* takes two arguments. The second argument to *cons* must be a list. The result is a lit.
*** The Law of NULL?: The primitive *null?* is defined only for lists.
*** The Law of Eq?: The primitive *eq?* takes two arguments. Each must be a non-numeric atom.

* C/C++

** 封装而不失效率
  
 [2015-08-09 Sun 13:21]
* Objective-C

* Java

* Lua

* C#

* Javascript

* Python

* Regular Expressions

* CMake

* HTML

* CSS

* Bash

* Ruby

