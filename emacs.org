#+STARTUP: overview
#+OPTIONS: TeX:t LaTeX:t skip:nil d:nil tasks:nil pri:nil title:t
#+TITLE: Emacs 相关
* 与中文相关的 Emacs 配置                                               :Emacs:
[[https://github.com/hick/emacs-chinese][hick/emacs-chinese]]  
 [2015-08-11 Tue 08:58]
* Learning Emacs
** TODO [#C]  阅读[[http://www.nhplace.com/kent/Papers/Technical-Issues.html][Technical Issues of Separation in Function Cells and Value Cells]]

** TODO [#B]  阅读[[http://sachachua.com/blog/2008/01/projects-in-emacs-org/][Projects in Emacs Org - sacha chua :: living an awesome life]]

** Learn Spacemacs
*** Install Spacemacs
1. 安装跟平台相关的 Emacs 版本
2. 安装 Source Code Pro 字体
*** Basic Configuration
**** Add a layer to record commands
add mwe-log-commands dotspacemacs-additional-packages
#+begin_src emacs-lisp
      (evil-leader/set-key
        "oll" 'mwe:log-keyboard-commands
        "olf" 'mwe:open-command-log-buffer)
#+end_src


**** Add two configuration line into dotspacemacs/config function.
#+begin_src emacs-lisp
  (global-company-mode t)
  (add-hook prog-mode-hook #'linum-mode)
#+end_src

**** 配置一个主题
比如 monokai 或者 solarized-light

*** Add some layers. (better-defaults, color, osx, chinese) 改了一些东西
**** You should read the docs of each layer you added
**** You'd better read all the code reside in the layer you added
*** Create your own layers(prelude, purcell, chenbin, oh-my-emacs etc)
**** Where to put your layer?
**** What's the meaning of layer files
 funcs.el, config.el, packages.el, extentions.el, keybindings.el
**** How to migrate your existing configurations

*** Modify the existing configuration of layers
Emacs is a state machine, all configurations override the existing
- post init function
- put it in the dotspacemacs/config function

*** Killer features
- Key sequence(guide key and helm)
- Windows, file, buffer
- search and replace
- major mode keybindings

** org-mode

*** 使用 Org-mode 来绘制 UML
[[http://archive.3zso.com/archives/plantuml-quickstart.html][使用 Emacs 敲出 UML，PlantUML 快速指南]]

#+begin_src plantuml :file normal_task_states.png :cache yes
title Task States
[*] -> TODO
TODO -> NEXT
TODO -> DONE
NEXT -> DONE
DONE -> [*]
TODO --> WAITING
WAITING --> TODO
NEXT --> WAITING
WAITING --> NEXT
HOLD --> CANCELLED
WAITING --> CANCELLED
CANCELLED --> [*]
TODO --> HOLD
HOLD --> TODO
TODO --> CANCELLED
TODO: t
NEXT: n
DONE: d
WAITING:w
note right of WAITING: Note records\nwhat it is waiting for
HOLD:h
note right of CANCELLED: Note records\nwhy it was cancelled
CANCELLED:c
WAITING --> DONE
#+end_src

#+RESULTS[61c867b8eb4f49bc47e44ec2b534ac3219d82594]:
[[file:normal_task_states.png]]

#+begin_src ditaa :file communication.png :cmdline -r -s 0.8 :exports both :cache yes
    +-----------+        +---------+                      
    |    PLC    |        |         |                      
    |  Network  +<------>+   PLC   +<---=---------+       
    |    cRED   |        |  c707   |              |       
    +-----------+        +----+----+              |       
                              ^                   |       
                              |                   |
                              |  +----------------|-----------------+
                              |  |                |                 |
                              v  v                v                 v
      +----------+       +----+--+--+      +-------+---+      +-----+-----+       Windows clients
      |          |       |          |      |           |      |           |      +----+      +----+
      | Database +<----->+  Shared  +<---->+ Executive +<-=-->+ Operator  +<---->|cYEL| . . .|cYEL|
      |   c707   |       |  Memory  |      |   c707    |      | Server    |      |    |      |    |
      +--+----+--+       |{d} cGRE  |      +------+----+      |   c707    |      +----+      +----+
         ^    ^          +----------+             ^           +-------+---+
         |    |                                   |
         |    +--------=--------------------------+
         v
+--------+--------+
|                 |
| Millwide System |            -------- Data ---------
| cBLU            |            --=----- Signals ---=--
+-----------------+
#+end_src

#+RESULTS[6a98e3156b0810f168bb2fe2fc6ae284ff581f70]:
[[file:communication.png]]



 [2015-08-06 Thu 21:31]
*** DONE refile 到一个 org(helm 选择),然后指定一个 headline(helm 选择)
CLOSED: [2015-08-06 Thu 15:10] SCHEDULED: <2015-08-05 Wed 22:00>
- State "DONE"       from "TODO"       [2015-08-06 Thu 15:10]
*** Learn headline
*** learning org mode basic syntax structures
*** Cookbook
[[http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html][Emacs orgsmode examples and cookbook]]
*** DONE Learn GTD and improve my current workflow
    CLOSED: [2015-04-24 Fri 16:19] SCHEDULED: <2015-03-22 Sun>
    - State "DONE"       from ""           [2015-04-24 Fri 16:19]
    :LOGBOOK:
    :END:
[[http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html][Emacs org-mode examples and cookbook]]
[[http://doc.norang.ca/org-mode.html][Org Mode - Organize Your Life In Plain Text!]]
[[http://orgmode.org/manual/index.html][The Org Manual]]
*** Project planning
[[http://members.optusnet.com.au/~charles57/GTD/Natural_Project_Planning.html#sec-2][Natural Project Planning with org-mode]]
*** 导出思维导图                                               :emacs:week:
"http://foobarnbaz.com/2013/08/02/awesome-mindmaps-using-org/"

** Useful links of Emacs
[[http://emacsclub.github.io/html/][Emacs Club]]

** Git
*** Use Emacs as an Git conflicts resolving tools.
[[http://emacsclub.github.io/html/emerge.html][Use Emerge]] to resolve conflicts.

** STARTED [#C] configure Emacs as an  email client [50%]

   :LOGBOOK:
   CLOCK: [2015-03-15 Sun 07:47]--[2015-03-16 Mon 13:33] => 29:46
   :END:
   - [X] configure mu4e client for Mac
   http://www.ict4g.net/adolfo/notes/2014/12/27/EmacsIMAP.html
   - [ ] improve the my daily email workflow in Emacs

** send weibo
** use shell in emacs
** write blog post
** bookmark for my pdf ebooks
** sourcecode repository
** learn how to consult emacs document for easch mode

** evil（包括我平常使用 vim 的各种快捷键，全部统一，这是一个漫长的过程）
** vim 里面常用插件在 emacs 里面的替代品
*** color-theme
*** surround
*** esay motion
*** text-obj-plugin
*** Ack
*** gist-vim
*** argdo or some sort of project wide search and replace
*** regular expresstion
*** vim-commentary
*** nerdtree
*** YouCompleteMe
*** syntastic
*** tagbar
*** vim -markdown
*** ctrlp (heml，<leader>xo)
*** delimitMate (smart parens)
*** ultisips (yalsnipt)
*** vim-powerLine(how to customize minibuffer toolbar)
*** vim-ablish (add blank linet below lines)
*** ctlr-o ctrl-i Mark, ctags, cscope,
*** tmux

**** Learn how to config org mode
Entered on [2013-11-02 Sat 21:06]

  [[file:~/myblog/octopress/source/_posts/2013-11-02-learning-emacs-org-mode.markdown::Read%20the%20org%20compact%20guide%20and%20summary%20the%20keypoint%20of%20org%20mode][file:~/myblog/octopress/source/_posts/2013-11-02-learning-emacs-org-mode.markdown::Read the org compact guide and summary the keypoint of org mode]]
**** Today I want to test the org-capture function
Entered on [2013-11-02 Sat 22:30]

[[file:~/Dropbox/org/gtd.org::*Daily%20Tasks][Daily Tasks]]
** c/c++
*** Irony-mode/flycheck-irony/rtags
*** Compile & Run in Emacs [%]
- [ ] How to find git managed project root directory
- [ ] Use zilongshanren/compile to choose a directory to store cmake build history. it's a buffer local variable
- [ ] other times, when calling zilongshanren/compile it should compile properly
- [ ] bind keys to run the project. <s-r> to run the project and <s-b> to compile the project.


** Read Emacs guru configs
[[https://github.com/eschulte/emacs24-starter-kit][eschulte/emacs24-starter-kit]]
[[https://github.com/syl20bnr/spacemacs/tree/master/contrib/lang/clojure][spacemacs/contrib/lang/clojure at master · syl20bnr/spacemacs]]
[[https://github.com/purcell/emacs.d][purcell/emacs.d]]
[[https://github.com/xiaohanyu/oh-my-emacs/blob/master/custom.el][oh-my-emacs/custom.el at master · xiaohanyu/oh-my-emacs]]
[[https://github.com/technomancy/emacs-starter-kit/tree/v3][technomancy/emacs-starter-kit]]
[[https://github.com/technomancy/better-defaults][technomancy/better-defaults]]
[[https://github.com/magnars/.emacs.d][magnars/.emacs.d]]
[[https://github.com/sachac/emacs-notes][sachac/emacs-notes]]
[[https://github.com/sachac/.emacs.d][sachac/.emacs.d]]
[[https://github.com/bbatsov/prelude][bbatsov/prelude]]
[[https://github.com/xuchunyang/my-emacs-config/blob/master/emacs-config.org][my-emacs-config/emacs-config.org at master · xuchunyang/my-emacs-config]]


* C/C++

** Emacs CEDET configuration
[[https://gist.github.com/andyque/ea30e46ee1ffc864f568][minimial-cedet-config.el]]
[[https://www.logilab.org/blogentry/173886][Emacs turned into a IDE with CEDET (Logilab.org)]]
[[http://tuhdo.github.io/c-ide.html#sec-6-4][C/C++ Development Environment for Emacs]]
* Emacs Lisp
  - State "DONE"       from "WAITING"    [2015-04-17 Fri 09:50]
  - State "DONE"       from "STARTED"    [2015-04-17 Fri 09:50]
**  How to learn Emacs Lisp
[[http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html][Stevey's Blog Rants: Emergency Elisp]]
[[http://www.gnu.org/software/emacs/manual/html_node/eintr/index.html][Programming in Emacs Lisp]]
[[http://www.gnu.org/software/emacs/manual/html_node/elisp/index.html][GNU Emacs Lisp Reference Manual]]
[[http://www.gnu.org/software/emacs/emacs-paper.html][EMACS: The Extensible, Customizable Display Editor]]
[[http://sachachua.com/blog/2013/03/learn-emacs-lisp-by-reading-emacs-lisp/][Learn Emacs Lisp by reading Emacs Lisp - sacha chua :: living an awesome life]]
[[http://emacswiki.org/emacs/LearnEmacsLisp][EmacsWiki: Learn Emacs Lisp]]

** Emacs lisp tips
[[http://www.emacswiki.org/emacs/EmacsLispProfiler][EmacsWiki: Emacs Lisp Profiler]]
[[https://www.youtube.com/watch?v%3DRvPFZL6NJNQ#t%3D15][Emacs Lisp Development - John Wiegley - Emacs Conference 2013 - YouTube]]
* Quick notes

** WWDC 2015 notes
*** What's new in SpriteKit
**** Review
- 2D graphics framework for games, idea borrow from cocos2d-iphone
- super easy to use, easy to learn
- Apple's own optimization and better UIKit integration.
- Better tools: Xcode. Live editor.
- Support iPhone, iPad, iOS and OSX(not real cross platform: maybe cocos2d-x a try)
**** SKCameraNode - which viewport is visible, multiple cameras.
- Best feature, it's a node: actions, constrains, rotation, scale. 
**** SKAudioNode
- positional audio, environmental sound, immerse audio.
**** SKReferenceNode(reuse nodes and actions, nscopying)
- create serialized assets
- Component as assets
- editor support
- automatically cache. This file won't load more than once.
- Complex action combo or scene. You could reuse across project or games.
- Texture animation action with lighting.
**** System integration
- Metal backend. SKShader will automatically upgrade. Zero action by developers.
- If the device support metal, it will use metal, otherwise it will use OpenGL.
- Swift support.  Nullability enhancements, objective-c generics.
**** SpriteKit Tools
- games rely on tools for iteration and scalability
- game logic, animation or assets
- improve workflow and build game faster
- focus on building the gameplay
***** tools:
- Texture atlas: automatically built with xcode. TexturePacker, we use scripts.
- Asset catalog: 
  1. precise control resolution. @2x @3x 
  2.use only download the assets match with the device.
- on Demand Resources: load by tags. background streaming.（重点）
- Particle editor: SKEmitterNode. live editor. Export small files.
- XCode quick: Playground with Swift. Easy to learn and use. Even in debugger.
- 2D editor: full visual editor for 2D games, no more compile and check. node code required. visual layout. live physics simulation. live shader editing.
- 2d editor enhancement: custom classes, camera, audio node, reference node. increased collaboration and reusability.
- exciting feature: timeline action editor, realtime preview, 2d and 3d support. Cinematic and interactive animations.(重点）
- data driven, reusability, no code required.（重点）
*** enhancement to SceneKit
**** intro to SceneKit
- SceneKit for 3D/ SpriteKit for 2D
- for iOS & MacOS X
- Particles/Physics/Physics fields/SpriteKit
- Metal and New scene editor
**** Scene Editor
- Can open and edit DAE, OBJ, Alembic, STL and PLY files
- New native file format(SceneKit Archive) NSKeyedArchiver
- Buld your game levels
- Shader modifiers and Ambient Occlusion
- Skybox, geometry modifiers
- collision mesh/rendered mesh
- skinning and shader modifiers
- configuring materials
- self illumination texture
- Reflective cube map
- compute shader(MTLbuffer and MTLTexture)
- Default on iOS 9
- Backward compatibility ensured(use interface builder to choose backend)
- Dealing with shaders(metal)
- shaders are not compatible
- SCNTechnique: pass description addition.
- Integration with Model I/O
- DAE format is best supported.
- Debug option
- Blend IO
- Audio nodes(AVAudioEngine)
**** Enhance
- SKTransitions
- metal support
- automatic context matching. (Metal or OpenGL)
*** GamePlayKit(重点）
**** Mission
- Common design patterns and architecture
- Standard gameplay algorithm
- Applicable to many games
- Graphics and engine agnostic
- SpriteKit, SceneKit, Metal and more.
**** Pathfinding(重点）
- pathfinding operates on a navigation graph
- Graphs are collections of nodes
- Nodes are joined by connections
- Connections are directional
- Optimal path exists between any two connected nodes
***** automatic graph generation
***** GKGraph
- Abstract graph base class
- Container of graph nodes
- Dynamic add/remove nodes
- Connect new nodes
- Find paths between nodes
- Two specializations(Grid graphs, obstacle graphs)
***** GKGridGraph
- Specialized for a 2D Grid
- Creates nodes on the grid(Cardinal connections, Optional diagonal connections)
- Optional diagonal connections (Easy add/remove of grid nodes)
***** GKObstacleGraph
- Specialized for pathing around obstacles
- Obstacles are arbitrary polygons(Dynamically add/remove obstacles, Dynamically connect nodes.)
- Buffer radius ("safty zone" around obstacles, Game dependent size.)
***** GKGraphNode
- Graph node base class
- Subclass for:
  - Advanced or non-spatial costs
  - Control over pathfinding
- Create your own graphs
  - Manually manage connections
  - Good for abstract or no-spatial graphs
***** Easily generate obstacles from SKNode bounds, physics bodies or textures

**** Entity/component system
- Great way to organize game logic
- Easy to maintain
- Easy to collaborate
- Scales with complexity
- Dynamic behavior
***** GKEntity
- Collectioin of components
- Dynamically add/remove component
- Access components by class type
- Update all components
***** GKComponent
- Subclass to add functionality
- Store component data as properties
- Custom selectors extend functionality
- Updated by there entity's update
- Implement logic in [updateWithDeltaTime:]
***** GKComponentSystem
- Collectioin of components from different entities(eg.All components are of the same class)
- Use when update order is important(eg.Update all AI before movement)
- Components in a system don't update with their entity's update

**** state machines
- Backbone of many gameplay elements
- Games are a collection of state machines (eg. Animations, AI, UI, levels etc)
- Common implementation removes boilerplate
- States reused throughout your game
***** GKStateMachine
- General purpose finite state machine
  - Single current state
  - All possible state
- [enterState] cause state transition
  - Check if transition is valid
  - Calls [exit] on previous
  - [enter] on next state
- Update currentState
***** GKState
- Abstract class
- Implement logic in Enter/Exit/Update (There are called by the state machine)
- Override [isValideNextState:] to control edges
  - By default, all edges are valid
  - Can be dynamic, based on internal state

**** agents, goal and behaviors
- Agents are autonomously moving entities(Driven by behaviors and goals, realistic constrains)
- Behaviours are made of goals (goals combined via weights)
- Games need believable movements
- Organic behaviors look intelligent
- Realistic movement(Has inertia, avoid obstacles, avoid other entities, follow paths)
***** GKAgent
- Simple autonomous point-mass
- Is a GKComponent
- Update applies behaviors(Goals change acceleration, velocity, position, rotation updated)
- Units are dimensionless(game world specific)
***** GKBehavior
- Dictionary-lick container of goals
- Dynamically modify behaviors(add/remove goals, modify weights)
- Set behavior on agent to use it
***** GKAgentDelegate
- Sync graphics, animations, physics, etc
[agentWillUpdate:] called before updates
[agentDidUpdate:] called after updates

**** AI strategies(MinMax AI)
- Many games need equal AI components
  - Can play the entire game
  - Play by the same rules as human players
- Chess, Checkers, Tic-Tac-Toe, etc
***** Features
- AI-controlled opponents
- Suggest move for human players
- Best suited for turn-based games (any game with discrete moves)
- Variable difficulty(adjust look ahead, select suboptimal moves)
***** GKGameModel protocol
- Abstract of the current game state
- list of players
- currently active players
- player scores
- possible player moves
- Apply moves for players
- changes game state
**** Random sources
- game have unique random number need
- rand() gives us random numbers, but we need more.
- platform-independent determinism
- multiple sources
- number distribution
This is where random source come in.
**** Rule systems
***** A game consists of three elements
- Nouns(properties)
- Position, speed, health, equipment, etc
- Verbs(Actions)
- Run , jump, use item, acceleration, etc
- Rules
- How your nouns and verbs interact.
***** motivation
- Complex reasoning with fuzzy logic
- facts can be grades of true
- fuzzy logic deals with approximations
- separate what we should do from how we should to it
- state facts about the world
- take deferred actions based on those facts.

**** Demobots(download sample)  
- use lots of feature in SpriteKit and GameKit
- Reference node
- App slicing
*** Manage 3D assets with Model I/O (重点）
**** Overview
- Framework for handling 3D assets and data.
- Import and export 3D asset files
-- Describe lighting, materials, environments
-- Process and generate asset data
-- Bake lights, subdivide and vocalize meshes.
- For physically based rendering
-- Designed for PBR tools and pipelines.
- Integrated with Xcode 7 and GameKit APIs.
- Available for iOS 9 and OS X 10.11.
Content Creation Tool -> Import -> Model I/O -> (SceneKit/Metal/OpenGL)
physic based, physics driven.
physic materials, physics light.
**** Features
- File formats( .abc, .ply, .stl, .obj)  Exports format: .stl
- Modify and Bake Assets
- Voxels
- System Integration: Playground and Swift, Finder and Quick look
- MDLAsset: Indexed container for 3D objects
- MDLObject: MDLTransformComponent -> TriggerComponent
- MDLMesh: contains one or more vertex buffers.
- MDLMeshBuffer/MDLVertexDescriptor
- Materials
***** Normal smoothing (shared vertex normals)
- Approximates curvature of more complicated geometry
- Flat vs smooth shading
***** Subdivision surfaces(Vary surface detail)
- Generate subdivided mesh from source mesh
- Increase level of detail only when and where necessary
***** Voxels(Physical realism)
- Volumetric representation consistent with the real world
- Procedural modeling/generation
- Easily explore dataset via neighborhood, child traversal
- Facilitates real-world operations like slicing and cutting
- Constructive Solid Geometry operations.

***** Advanced lighting and baking
- Global illumination
-- Global illumination looks great
-- But very expensive
-- We want to approximate GI 
-- Balance performance/quality
- Ambient occlusion 
-- Measure of geometry occlusion
-- Use offline raytracing
-- Input -- a mesh and a set of occlusion meshes
-- Output -- a set of occlusion values
- Stored in vertices or a texture
- Light map
-- Computes the effect of lights
-- Supports lots of lights
-- calculated offline
-- complex lights supported (tray trace)

*** What's new in metal part1
**** Overview
- Dramatically reduced overhead
- Precompiled shaders
- Graphics and compute
- Efficient multithreading
- Support for OS X 10
- Tools support: Frame debugger, shader profiler, shader editor, state inspector
***** Metal OS X
- Minimal code change required for existing iOS applications
- Device selection
- Support for discrete memory
- new texture formats for desktop GPUs.
**** New feature
- New memory model (discrete memory model)
-- shared storage mode/private storage mode/managed storage mode(on in OS X)
- Layered rendering(OS X 10)
- Texture barriers(OS X 10)
- Texture compression formats(ASTC format)
- GPU families
- MetalKit
- Metal performance shaders
- Metal trace tools
**** Metal and App Thinning
- Tag assets, this is the same with iOS
*** What's new in metal part2
**** Introduction MetalKit
- MetalKit provides efficient implementation for commonly used scenarios
-- less effort to get up and rendering
-- increased performance and stability
- MetalKit View
-- Unified view class for rendering Metal secene
- Texture Loader
-- Metal texture object creation from image files
- Model I/O integration
-- load and manage mesh data for Metal rendering
**** Metal Performance Shaders(A8 chip)
- A framwork of data-parallel algorithms for the GPU
- CPU-style library for the GPU
- Optimized for iOS
- Available in iOS 9 for the A8 processor
- Histogram, Equalization and Specification
- Morphology -- min, max, dilate and rode
- Lanczos(兰索斯) resampling
- Median
- Thresholding
- Integral
- Convolution -- general, gaussian blur, box, tent and sobel
**** Summary
- Make use of the new Metal support framework
- robust, optimized, easy to integrate
- faster bring-up of your application
- less code to write and maintain
*** metal performance optimization
**** Metal system trace tool(new in iOS 9, watch the demo)
- Visual frame debugger
- Resource and state viewer
- shader profiling
- shader edit and continue
- debug mode for Metal framwork
- integrated offline Metal compiler
**** demo
- Create expensive objects upfront and reuse
- MTLLibrary (a library of compiled shaders)
- Device and Command Queue
- Depth/Stencil and Sampler State
**** Metal Best practices
- profile early and often
- Acquire the Drawable at the latest opportunity
-- Immediately before the render pass in which it is used
-- Hides long latency in no drawables available.
- consider multithreading if GPU based
**** Summary
- Metal System Trace offers a new insight into Metal app performance.
-- Use in conjunction with XCode to profile early and often.
- Follow Metal best practices to maximize app performance
-- Create expensive objects upfront and reuse.
-- Buffer dynamic shared resource
-- Acquire the drawable at the latest opportunity
-- Don't waste render command encoders
-- Consider multithreading f still CPU-bound
-- no runtime shader compilation
*** going so social with replaykit and game center(重点）
**** Overview
**** What's new in Game center
***** What's Game Center 
- Friends 
- Leaderboards
- Real time multiplayer
- Turn based multiplayer
- Challenges
***** Guest players
- GKPlayer instance 
-- Do not require autoentication
-- First class participants in multiplayer games
- Can fill up all the slots in a game
-- Up to three for real time
-- Up to fifteen for turn based
****** Great for pass and play and handling AI players
****** You define the identifier--needs to be unique across the game
****** Cannot earn achievements or post scores
****** Sessions with guest players only compatible with other players running iOS 9
- Game still compatible with players on older systems.
***** Unified server environment
****** Sandbox(production server and sandbox are in one server)
****** Benefits
- Simplifies accounts 
- compatible with TestFlight
- Multiplayer works across versions (if enabled)
- Automatic
****** Considerations
- New games appear in friend's game list (include unreleased)
- Scores post to existing leaderboards
- iOS 8 users still need to flip the switch
**** Introducing ReplayKit
- New way to add social to your games
- Share game experiences.
- Record your running app
- Add voice commentary
- Playback, scrub and trim
- Share (Social networks, Video destination sites)
- When to Record (automatic vs user-initiated)
- only available in iOS 9.
**** Summary
- Records audio and visuals of running application
- Efficient with privacy safeguards
- Compact framework with simple adoption.

** TODO [#C] Add Unity3D C# support                                  :Emacs:

    [[https://bbbscarter.wordpress.com/2013/08/17/c-autocompletion-in-emacs/][C# autocompletion in Emacs | Nerdgasm]]
[[https://bbbscarter.wordpress.com/][Nerdgasm | Brainfarts from an ageing games coder]]
[[https://bbbscarter.wordpress.com/2014/04/21/compiling-unity-projects-from-within-emacs/][Compiling Unity projects from within Emacs | Nerdgasm]]
[[https://bbbscarter.wordpress.com/2013/12/21/var-eldoc-and-omnisharp/][‘var’, ELDoc and Omnisharp | Nerdgasm]]
[[https://bbbscarter.wordpress.com/2013/08/17/c-autocompletion-in-emacs/][C# autocompletion in Emacs | Nerdgasm]]
[[http://blog.tkeo.info/blog/2014/12/10/unity-with-emacs/][To the Unity development in Emacs - blog.tkeo.info]]
[[http://bocchies.hatenablog.com/entry/2014/05/09/041130][Emacs24.3 to write a C # for Unity in (for Mac OSX) - survival report of the phrase bocce]]
[[http://qiita.com/fujimisakari/items/d043a2fae31ed740e290][Unity development in Emacs (c #) to Environment for - Qiita]]

** DONE Figure out how Emacs Packages system works
CLOSED: [2015-08-23 Sun 16:13]
- State "DONE"       from "TODO"       [2015-08-23 Sun 16:13]
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Init-File.html#Init-File][Init File - GNU Emacs Manual]]
[[http://www.gnu.org/software/emacs/manual/html_node/emacs/Package-Installation.html][Package Installation - GNU Emacs Manual]]
[[http://stackoverflow.com/questions/11127109/emacs-24-package-system-initialization-problems][Emacs 24 Package System Initialization Problems - Stack Overflow]]
** DONE Clean up my Emacs Prelude Configs, put all of my customization to its own place :Emacs:
     CLOSED: [2015-04-10 Fri 16:18] SCHEDULED: <2015-04-05 Sun>
     - State "DONE"       from "TODO"       [2015-04-10 Fri 16:18]

**  A hacker's guide for Gmail
    http://dbp.io/essays/2013-06-29-hackers-replacement-for-gmail.html

  [2015-04-01 Wed 10:10]

**  Try to use org-protocol in my Emacs Org workflow.
  [[http://orgmode.org/worg/org-contrib/org-protocol.html][org-protocol.el – Intercept calls from emacsclient to trigger custom actions]]
  [2015-04-01 Wed 10:14]

** Read email with mu4e                                               :email:
[[http://www.brool.com/index.php/using-mu4e][Using mu4e | brool]]

  [2015-04-01 Wed 11:58]

**  Find and Replace all files in a directory
[[http://stackoverflow.com/questions/270930/using-emacs-to-recursively-find-and-replace-in-text-files-not-already-open][editor - Using Emacs to recursively find and replace in text files not already open - Stack Overflow]]

  [2015-04-01 Wed 16:34]

** DONE Use Org-mode to Write HTML5 presentation.                       :org:
   CLOSED: [2015-04-06 Mon 16:52] SCHEDULED: <2015-04-03 Fri 17:00>
   - State "DONE"       from ""           [2015-04-06 Mon 16:52]
  http://jr0cket.co.uk/2013/10/create-cool-slides--Org-mode-Revealjs.html
  [2015-04-03 Fri 15:13]

** DONE Add Minor-mode support and minor mode keybinding.
   CLOSED: [2015-04-06 Mon 16:52] SCHEDULED: <2015-04-05 Sun>
   - State "DONE"       from "TODO"       [2015-04-06 Mon 16:52]
When popup win shows, add local keybinding to copy and navigate text.
  https://github.com/andyque/youdao-dictionary.el
  [2015-04-03 Fri 16:53]

** DONE Study this package
   CLOSED: [2015-04-06 Mon 16:52] SCHEDULED: <2015-04-04 Sat>
   - State "DONE"       from "TODO"       [2015-04-06 Mon 16:52]
  https://github.com/bbatsov/prelude
  [2015-04-03 Fri 18:28]

** DONE How to define a global keybinding to override all minor mode and major mode. :emacs:
CLOSED: [2015-06-07 Sun 19:54]
- State "DONE"       from "TODO"       [2015-06-07 Sun 19:54]
[[http://stackoverflow.com/questions/683425/globally-override-key-binding-in-emacs][keyboard shortcuts - Globally override key binding in Emacs - Stack Overflow]]
  http://emacs.stackexchange.com/questions/352/how-to-override-major-mode-bindings
[[http://shallowsky.com/blog/linux/editors/emacs-global-key-bindings.html][Global key bindings in Emacs (Shallow Thoughts)]]

**  Config cocos2d-x C/C++ project with EDE.                          :cmake:
  https://github.com/alexott/emacs-configs/blob/master/rc/emacs-rc-cedet.el#L130

** TODO [#C] Study cpputils-cmake and CMake-ide to make my cocos2d-x c++ project rocks :cmake:
[[https://github.com/atilaneves/cmake-ide][atilaneves/cmake-ide]]
https://github.com/redguardtoo/cpputils-cmake/pull/26

** Emacs for  Python openstack development tools.                    :Python:
  https://dague.net/2015/03/24/openstack-emacs-tools/
  [2015-04-13 Mon 23:17]

** DONE Make github flavor markdown Emacs live editing                :Emacs:
   CLOSED: [2015-04-21 Tue 09:48] DEADLINE: <2015-04-24 Fri> SCHEDULED: <2015-04-19 Sun>
   - State "DONE"       from "TODO"       [2015-04-21 Tue 09:48]
[[http://qiita.com/garaemon/items/2a551f6da3380950b21c][To preview a markdown in emacs - Qiita]]
  [2015-04-14 Tue 11:30]

** DONE Use Org-mode to do literate programming                         :Org:
   CLOSED: [2015-04-24 Fri 16:19] DEADLINE: <2037-04-16 Thu> SCHEDULED: <2015-04-16 Thu>
   - State "DONE"       from ""           [2015-04-24 Fri 16:19]
http://www.howardism.org/Technical/Emacs/literate-database.html
http://www.howardism.org/Technical/Emacs/literate-devops.html#fnr.2
http://analogpixel.org/html/2015-03-10-Literate-Systems-Administration.html
  http://irreal.org/blog/?p=3883
  [2015-04-16 Thu 18:11]

** DONE Add greyshade theme to my Octopress blog. And add a new English blog to www.zilongshanren.com. :Blog:
CLOSED: [2015-05-04 Mon 14:28] DEADLINE: <2015-04-27 Mon> SCHEDULED: <2015-04-25 Sat>
- State "DONE"       from "STARTED"    [2015-05-04 Mon 14:28]
:LOGBOOK:
CLOCK: [2015-05-04 Mon 10:53]--[2015-05-04 Mon 11:18] =>  0:25
:END:
And start blogging my road to mastering emacs.

  https://github.com/shashankmehta/greyshade
  [2015-04-16 Thu 23:44]

**  Use Ctags for Lua code completion.
http://zmalltalker.com/emacs/tags.html

  http://ericjmritz.name/2013/03/14/writing-custom-rules-for-exuberant-ctags/
  [2015-04-19 Sun 08:53]

** Emacs defadvice limitations                              :Emacs:defadvice:
http://nullprogram.com/blog/2013/01/22/
  [2015-04-22 Wed 11:35]

** DONE Configure my Lua development environment.                    :Emacs:
CLOSED: [2015-05-08 Fri 15:20] DEADLINE: <2015-04-22 Wed> SCHEDULED: <2015-05-12 Tue>
- State "DONE"       from ""           [2015-05-08 Fri 15:20]
http://ericjmritz.name/2015/03/25/creating-and-using-environments-in-lua/
http://ericjmritz.name/2013/06/17/type-checking-in-lua/
  http://ericjmritz.name/2015/04/21/luacheck/
  [2015-04-22 Wed 14:01]

** DONE Write a repository for storing my Elisp tips and tricks as well as the Cheetsheet. :Emacs:
CLOSED: [2015-05-10 Sun 16:58] DEADLINE: <2015-05-03 Sun> SCHEDULED: <2015-04-28 Tue>
- State "DONE"       from ""           [2015-05-10 Sun 16:58]
Where did these cheetsheet comes from?
1. From the functions written by myself. I need to regonize the common pattern.
2. From existing cheetsheet
https://lispp.wordpress.com/2009/11/25/emacs-lisp-cheatsheet/
http://wikemacs.org/wiki/Emacs_Lisp_Cheat_Sheet
https://github.com/gar3thjon3s/elisp-cheatsheet/blob/master/cheatsheet.md
http://steve-yegge.blogspot.com/2008/01/emergency-elisp.html

3. the cheetsheet should be written in org-mode.
4. it should cover the basics of elisp (learn x in y minutes and elisp intro)
5. From the packages written by others. like abo-abo, prelude etc.

  [2015-04-23 Thu 11:40]







* 介绍一下 Spacemacs(已经录制两个视频)
** 介绍 Spacemacs 的特点，以及我为什么要选择它(5min)
** 介绍如何添加自己的配置(5min, 添加 command-log-mode)
** 介绍我是怎么使用 Spacemacs 的(10 min)
*** Org-mode
**** GTD
**** Taking Notes
*** C/C++
*** Python
*** Lua
*** Javascript
*** Lisp
*** Writing(Blog and Markdown)
*** Tools(Git, Elfeed, Github-star, Youdao, Flyspell, finder, shell)
[[file:cocos2d-x.org::*modern%20c%2B%2B%20,%20mainly%20about%20c%2B%2B%2011][modern c++ , mainly about c++ 11]]
[[file:cocos2d-x.org::*cocos2d-x][cocos2d-x]]


